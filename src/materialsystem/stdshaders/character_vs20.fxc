// Modified from Phong shader; original copyright notice follows:
//========== Copyright (c) Valve Corporation, All rights reserved. ==========//

// STATIC: "DECAL"					"0..1" [vs30]
// STATIC: "WORLD_NORMAL"			"0..0" [vs20]
// STATIC: "WORLD_NORMAL"			"0..1" [vs30]

// DYNAMIC: "COMPRESSED_VERTS"		"0..1"
// DYNAMIC: "SKINNING"				"0..1"

// DYNAMIC: "MORPHING"				"0..1" [vs30] [ = pShaderAPI->IsHWMorphingEnabled() ]
// DYNAMIC: "STATUSEFFECT"			"0..4" [vs20b]
// DYNAMIC: "STATUSEFFECT"			"0..1" [vs30]

#include "common_fog_vs_supportsvertexfog_fxc.h"
#include "common_vs_fxc.h"

static const bool g_bSkinning		= SKINNING ? true : false;
static const int g_FogType			= DOWATERFOG;

const float4 cBaseTexCoordTransform[2]		: register( SHADER_SPECIFIC_CONST_0 );
const float4 cDetailTexCoordTransform[2]	: register( SHADER_SPECIFIC_CONST_2 );

#ifdef SHADER_MODEL_VS_3_0
// NOTE: cMorphTargetTextureDim.xy = target dimensions,
//		 cMorphTargetTextureDim.z = 4tuples/morph
const float3 cMorphTargetTextureDim			: register( SHADER_SPECIFIC_CONST_4 );
const float4 cMorphSubrect					: register( SHADER_SPECIFIC_CONST_5 );

sampler2D morphSampler						: register( s0 );
#endif

const float4 g_vEyeVector					: register( SHADER_SPECIFIC_CONST_6 );
const float g_flTime						: register( SHADER_SPECIFIC_CONST_7 );

struct VS_INPUT
{
	// This is all of the stuff that we ever use.
	float4 vPos						: POSITION;
	float4 vBoneWeights				: BLENDWEIGHT;
	float4 vBoneIndices				: BLENDINDICES;
	float4 vNormal					: NORMAL;
	float4 vColor					: COLOR0;
	float3 vSpecular				: COLOR1;
	// make these float2's and stick the [n n 0 1] in the dot math.
	float4 vTexCoord0				: TEXCOORD0;
	float4 vTexCoord1				: TEXCOORD1;
	float4 vTexCoord2				: TEXCOORD2;
	float4 vTexCoord3				: TEXCOORD3;
	float3 vTangentS				: TANGENT;
	float3 vTangentT				: BINORMAL;
	float4 vUserData				: TANGENT;

	// Position and normal/tangent deltas
	float4 vPosFlex					: POSITION1;
	float4 vNormalFlex				: NORMAL1;

#ifdef SHADER_MODEL_VS_3_0
	float vVertexID					: POSITION2;
#endif
};

struct VS_OUTPUT
{
	// Stuff that isn't seen by the pixel shader
	float4 projPos					: POSITION;	
	// Stuff that is seen by the pixel shader
	float4 baseTexCoordDetailTexCoord	: TEXCOORD0;			// includes detail tex coord
	float4 lightAtten				: TEXCOORD1;
	float3x3 tangentSpaceTranspose	: TEXCOORD2;
	//	     second row				: TEXCOORD3;
	//	     third row				: TEXCOORD4;
	float4 projPos_fWrinkleWeight	: TEXCOORD5;
	#if DOPIXELFOG
		float3 worldPos_vertexFogFactor	: TEXCOORD6;
	#else
		float4 worldPos_vertexFogFactor	: TEXCOORD6;
	#endif
	#if defined( SHADER_MODEL_VS_3_0 ) && STATUSEFFECT
		float4 statusEffectTexCoord		: TEXCOORD7; // xy=fire zw=ice
		float2 statusEffectTexCoord2	: TEXCOORD8; // xy=shock
	#endif
};

float2 ComputeStatusEffectCoord( float4 vTexCoords, float flSpeed, float flScale )
{
	float2 vCoord = vTexCoords.xy;
	vCoord.x += ( flSpeed / 128.0 * g_flTime ) % 1.0;
	return vCoord * flScale;
}

//-----------------------------------------------------------------------------
// Main shader entry point
//-----------------------------------------------------------------------------
VS_OUTPUT main( const VS_INPUT v )
{
	VS_OUTPUT o = ( VS_OUTPUT )0;

	float4 vPosition, vTangent, vTexCoords;
	float3 vNormal, worldPos, worldNormal, worldTangentS, worldTangentT;

	vPosition = v.vPos;

	DecompressVertex_NormalTangent( v.vNormal, v.vUserData, vNormal, vTangent );

	#if ( !defined( SHADER_MODEL_VS_3_0 ) || !MORPHING )
	{
		ApplyMorph( v.vPosFlex, v.vNormalFlex.xyz, vPosition.xyz, vNormal, vTangent.xyz, o.projPos_fWrinkleWeight.w );
	}
	#else
	{
		ApplyMorph( morphSampler, cMorphTargetTextureDim, cMorphSubrect, v.vVertexID, v.vTexCoord2.xyz,
					vPosition.xyz, vNormal, vTangent.xyz, o.projPos_fWrinkleWeight.w );
	}
	#endif

	// Perform skinning
	SkinPositionNormalAndTangentSpace( g_bSkinning, vPosition, vNormal, vTangent,
										v.vBoneWeights, v.vBoneIndices, worldPos,
										worldNormal, worldTangentS, worldTangentT );

	// Always normalize since flex path can denormalize
	worldNormal   = normalize( worldNormal );
	worldTangentS = normalize( worldTangentS );
	worldTangentT = normalize( worldTangentT );

	#if defined( SHADER_MODEL_VS_3_0 ) && MORPHING && DECAL && ( !WORLD_NORMAL )
	{
		// Avoid z precision errors
		worldPos += worldNormal * 0.05f * v.vTexCoord2.z;
	}
	#endif

	vTexCoords = v.vTexCoord0;

	// Texture coordinate transforms
	o.baseTexCoordDetailTexCoord.x = dot( vTexCoords, cBaseTexCoordTransform[0] );
	o.baseTexCoordDetailTexCoord.y = dot( vTexCoords, cBaseTexCoordTransform[1] );
	#if ( defined( SHADER_MODEL_VS_3_0 ) || !STATUSEFFECT )
	o.baseTexCoordDetailTexCoord.z = dot( vTexCoords, cDetailTexCoordTransform[0] );
	o.baseTexCoordDetailTexCoord.w = dot( vTexCoords, cDetailTexCoordTransform[1] );
	#endif
	#if ( !defined( SHADER_MODEL_VS_3_0 ) && STATUSEFFECT == 1 )
	// fire
	o.baseTexCoordDetailTexCoord.zw = ComputeStatusEffectCoord( vTexCoords, 24, 6.0 );
	#endif
	#if ( !defined( SHADER_MODEL_VS_3_0 ) && STATUSEFFECT == 2 )
	// ice
	o.baseTexCoordDetailTexCoord.zw = ComputeStatusEffectCoord( vTexCoords, 0, 5.0 );
	#endif
	#if ( !defined( SHADER_MODEL_VS_3_0 ) && STATUSEFFECT == 3 )
	// shock
	o.baseTexCoordDetailTexCoord.zw = ComputeStatusEffectCoord( vTexCoords, 80, 4.0 );
	#endif
	#if ( defined( SHADER_MODEL_VS_3_0 ) && STATUSEFFECT )
	// all three
	o.statusEffectTexCoord.xy = ComputeStatusEffectCoord( vTexCoords, 24, 6.0 );
	o.statusEffectTexCoord.zw = ComputeStatusEffectCoord( vTexCoords, 0, 5.0 );
	o.statusEffectTexCoord2.xy = ComputeStatusEffectCoord( vTexCoords, 80, 4.0 );
	#endif
	
	#if ( !DOPIXELFOG )
	{
		o.worldPos_vertexFogFactor.w = CalcNonFixedFunctionFog( worldPos, g_FogType );
	}
	#endif

	// Needed for water fog alpha and diffuse lighting 
	// FIXME: we shouldn't have to compute this all the time.
	o.worldPos_vertexFogFactor.xyz = worldPos;

	// Compute lighting attenuations
	o.lightAtten.x = GetVertexAttenForLight( worldPos, 0 );
	o.lightAtten.y = GetVertexAttenForLight( worldPos, 1 );
	o.lightAtten.z = GetVertexAttenForLight( worldPos, 2 );
	o.lightAtten.w = GetVertexAttenForLight( worldPos, 3 );

	// Tangent space transform
	o.tangentSpaceTranspose[0].xyz = float3( worldTangentS.x, worldTangentT.x, worldNormal.x );
	o.tangentSpaceTranspose[1].xyz = float3( worldTangentS.y, worldTangentT.y, worldNormal.y );
	o.tangentSpaceTranspose[2].xyz = float3( worldTangentS.z, worldTangentT.z, worldNormal.z );
	// Transform into projection space
	o.projPos = mul( float4( worldPos, 1 ), cViewProj );
	o.projPos_fWrinkleWeight.xyz = o.projPos.xyz;

	#if ( WORLD_NORMAL )
	{
		o.projPos_fWrinkleWeight.z = dot( g_vEyeVector.xyz, worldPos.xyz - cEyePos.xyz );	// Linear depth
	}
	#endif

	// Don't have to worry about hardware blend here since we never do that with phong.
	#if ( !DOPIXELFOG )
	{
		o.worldPos_vertexFogFactor.w = CalcNonFixedFunctionFog( worldPos, g_FogType );
	}
	#endif

	return o;
}
